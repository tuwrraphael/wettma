{"version":3,"file":"6439b1e755ce18c0fdac.bundle.js","mappings":"oIAAM,MAAOA,EAITC,YAAoBC,EACRC,EACAC,GAFQ,KAAAF,YAAAA,EACR,KAAAC,YAAAA,EACA,KAAAC,cAAAA,EACRC,KAAKC,aAAe,IAAIC,IACxBF,KAAKG,aAAe,IAAIC,OAC5B,CAEAC,OAAOC,EAAWC,GACd,IAAIC,EAAW,IAAIN,IACfO,EAAUC,GAASF,EAASG,IAAID,IAAM,MACtC,IAAIE,EAAMZ,KAAKF,YAAYY,GAE3B,OADAF,EAASK,IAAIH,EAAGE,GACTA,CACV,EAJyC,GAK1C,IAAK,IAAIE,KAAKC,MAAMC,KAAKhB,KAAKH,YAAYoB,UAAW,CACjD,IAAIC,EAAWJ,EACXK,EAAOb,EAAKc,MAAKC,GAAKrB,KAAKG,aAAaQ,IAAIO,IAAOT,EAAOY,KAC1DF,EACAZ,EAAiBW,EAAIC,GAGrBnB,KAAKH,YAAYyB,YAAYJ,E,CAGrC,IAAIK,EAAkB,KAClBC,EAAmB,IAAItB,IAC3B,IAAK,IAAIuB,KAAKnB,EAAM,CAChB,IAAIM,EAAMH,EAAOgB,GACbC,EAAkB1B,KAAKC,aAAaU,IAAIC,GACvCc,IACDA,EAAe1B,KAAKD,cAAc0B,GAClClB,EAAcmB,EAAcD,GAC5BzB,KAAKG,aAAaU,IAAIa,EAAcd,IAExCY,EAAiBX,IAAID,EAAKc,GACtB,MAAQH,GAAUG,GAAgB1B,KAAKH,YAAY8B,kBACnD3B,KAAKH,YAAY+B,QAAQF,GAEpB,MAAQH,GAAUA,EAAOM,oBAAsBH,GACpDH,EAAOO,sBAAsB,WAAYJ,GAE7CH,EAASG,C,CAEb1B,KAAKC,aAAeuB,CACxB,E,8GC5CE,MAAOO,EACTnC,cACS,KAAAoC,KAAO,CADA,E,qBCKd,MAAOC,UAA4BC,YAQrCtC,cACIuC,QACAnC,KAAKoC,UCnBF,giBDoBHpC,KAAKqC,MAAQC,EAAAA,EAAAA,cACbtC,KAAKuC,OAASC,EAAAA,EAAAA,cACdxC,KAAKyC,UAAYzC,KAAK0C,cAAc,SACpC1C,KAAK2C,oBAAsB3C,KAAK0C,cAAc,0BAC9C1C,KAAK4C,mBAAqB,IAAIjD,EAAAA,EAAuBK,KAAKyC,WACtDI,GAAKA,EAAEC,SACPD,IACI,IAAIE,EAAMC,SAASjD,cAAc,MAIjC,OAHAgD,EAAIE,YAAaD,SAASjD,cAAc,OACxCgD,EAAIE,YAAaD,SAASjD,cAAc,OACxCgD,EAAIE,YAAaD,SAASjD,cAAc,OACjCgD,CAAG,GAEtB,CAEAG,oBACIlD,KAAKmD,gBAAkB,IAAIC,gBAC3BpD,KAAKqC,MAAMgB,WAAW,IAAItB,GAC1B/B,KAAKqC,MAAMiB,WAAUC,IACjBvD,KAAK4C,mBAAmBvC,OAAOkD,EAAEC,YAAY,CAACC,EAAG/C,KACc+C,EAAExC,SAAS,GAC7DyC,UAAY,GAAGhD,EAAEiD,SACgCF,EAAExC,SAAS,GAC7DyC,UAAYhD,EAAEkD,YACsCH,EAAExC,SAAS,GAC7DyC,UAAY,GAAGhD,EAAEmD,OAAOC,QAAQ,IAAI,IAElD9D,KAAK2C,oBAAoBoB,MAAMC,QAAUT,EAAEU,mBAAqBC,EAAAA,EAAAA,OAAsB,OAAS,MAAM,GACtGlE,KAAKmD,gBAAgBgB,SACxBC,EAAAA,EAAAA,GAAuBpE,KAAK0C,cAAc,KAAM,SAASe,IACrDA,EAAEY,iBACFrE,KAAKuC,OAAOA,OAAO+B,SAAS,GAAI,SAAS,GAC1CtE,KAAKmD,gBAAgBgB,OAE5B,CAEAI,uBACIvE,KAAKmD,gBAAgBqB,OACzB,EAGJC,eAAeC,OAAO,uBAAwBzC,E","sources":["webpack://wettma/./src/ArrayToElementRenderer.ts","webpack://wettma/./src/state/requests/UpdateScoreboardAction.ts","webpack://wettma/./src/components/ScoreboardComponent/ScoreboardComponent.ts","webpack://wettma/./src/components/ScoreboardComponent/ScoreboardComponent.html"],"sourcesContent":["export class ArrayToElementRenderer<T, E extends Element, K>{\n    private keyToElement: Map<K, E>;\n    private elementToKey: WeakMap<E, K>;\n    \n    constructor(private listElement: HTMLElement,\n        private keySelector: (x: T) => K,\n        private createElement: (x: T) => E) {\n        this.keyToElement = new Map<K, E>();\n        this.elementToKey = new WeakMap<E, K>();\n    }\n\n    update(list: T[], updateElement: (x: E, data: T) => void) {\n        let keyCache = new Map<T, K>();\n        let getKey = (d: T) => keyCache.get(d) || (() => {\n            let key = this.keySelector(d);\n            keyCache.set(d, key);\n            return key;\n        })();\n        for (let x of Array.from(this.listElement.children)) {\n            let el: E = <E>x;\n            let data = list.find(i => this.elementToKey.get(el) == getKey(i));\n            if (data) {\n                updateElement(<E>el, data);\n            }\n            else {\n                this.listElement.removeChild(el);\n            }\n        }\n        let before: Element = null;\n        let nextKeyToElement = new Map<K, E>();\n        for (let t of list) {\n            let key = getKey(t);\n            let childElement: E = this.keyToElement.get(key);\n            if (!childElement) {\n                childElement = this.createElement(t);\n                updateElement(childElement, t);\n                this.elementToKey.set(childElement, key);\n            }\n            nextKeyToElement.set(key, childElement);\n            if (null == before && childElement != this.listElement.firstElementChild) {\n                this.listElement.prepend(childElement);\n            }\n            else if (null != before && before.nextElementSibling != childElement) {\n                before.insertAdjacentElement(\"afterend\", childElement);\n            }\n            before = childElement;\n        }\n        this.keyToElement = nextKeyToElement;\n    }\n\n}","import { Action as Action } from \"./Action\";\nimport { ActionType as ActionType } from \"./ActionType\";\n\n\nexport class UpdateScoreboardAction implements Action {\n    constructor() { }\n    readonly type = ActionType.UpdateScoreboard;\n}\n","import { abortableEventListener } from \"../../abortable-event-listener\";\nimport { AppRouter } from \"../../app-router\";\nimport { ArrayToElementRenderer } from \"../../ArrayToElementRenderer\";\nimport { ScoreboardEntry } from \"../../models/ScoreboardEntry\";\nimport { UpdateScoreboardAction } from \"../../state/requests/UpdateScoreboardAction\";\nimport { RequestState } from \"../../state/state\";\nimport { Store } from \"../../state/store\";\nimport template from \"./ScoreboardComponent.html\";\nimport \"./ScoreboardComponent.scss\";\n\nexport class ScoreboardComponent extends HTMLElement {\n    private store: Store;\n    private abortController: AbortController;\n    private router: AppRouter;\n    private scoreboardRenderer: ArrayToElementRenderer<ScoreboardEntry, HTMLTableRowElement, string>;\n    private tableBody: HTMLTableSectionElement;\n    private scoreboardLoadError: HTMLDivElement;\n\n    constructor() {\n        super();\n        this.innerHTML = template;\n        this.store = Store.getInstance();\n        this.router = AppRouter.getInstance();\n        this.tableBody = this.querySelector(\"tbody\");\n        this.scoreboardLoadError = this.querySelector(\"#scoreboard-load-error\");\n        this.scoreboardRenderer = new ArrayToElementRenderer(this.tableBody,\n            g => g.userId,\n            g => {\n                let row = document.createElement(\"tr\");\n                row.appendChild( document.createElement(\"td\"));\n                row.appendChild( document.createElement(\"td\"));\n                row.appendChild( document.createElement(\"td\"));\n                return row;\n            });\n    }\n\n    connectedCallback() {\n        this.abortController = new AbortController();\n        this.store.postAction(new UpdateScoreboardAction());\n        this.store.subscribe(s => {\n            this.scoreboardRenderer.update(s.scoreboard, (e, d) => {\n                let placeCol: HTMLTableCellElement = <HTMLTableCellElement>e.children[0];\n                placeCol.innerText = `${d.place}.`;\n                let nameCol: HTMLTableCellElement = <HTMLTableCellElement>e.children[1];\n                nameCol.innerText = d.displayName;\n                let pointsCol: HTMLTableCellElement = <HTMLTableCellElement>e.children[2];\n                pointsCol.innerText = `${d.points.toFixed(2)}`;\n            });\n            this.scoreboardLoadError.style.display = s.scoreboardRequest == RequestState.Failed ? \"flex\" : \"none\";\n        }, this.abortController.signal);\n        abortableEventListener(this.querySelector(\"a\"), \"click\", e => {\n            e.preventDefault();\n            this.router.router.navigate(\"\", \"wettma\");\n        }, this.abortController.signal);\n\n    }\n\n    disconnectedCallback() {\n        this.abortController.abort();\n    }\n}\n\ncustomElements.define(\"scoreboard-component\", ScoreboardComponent);\n","// Module\nvar code = \"<div class=\\\"container\\\"> <section class=\\\"section\\\"> <nav class=\\\"link-section\\\"> <a href=\\\"\\\" id=\\\"back-link\\\">zur√ºck zur Startseite</a> </nav> <h2> Rangliste </h2> <div id=\\\"scoreboard-load-error\\\" class=\\\"status-msg error\\\" style=\\\"display:none\\\"> <span class=\\\"material-icons\\\" title=\\\"Tipp konnte nicht gespeichert werden\\\"> error </span> Rangliste konnte nicht geladen werden. </div> <table class=\\\"scoreboard-table\\\"> <thead> <tr> <td title=\\\"Platzierung\\\"></td> <td>Spieler/in</td> <td>Punkte</td> </tr> </thead> <tbody> </tbody> </table> </section> </div>\";\n// Exports\nexport default code;"],"names":["ArrayToElementRenderer","constructor","listElement","keySelector","createElement","this","keyToElement","Map","elementToKey","WeakMap","update","list","updateElement","keyCache","getKey","d","get","key","set","x","Array","from","children","el","data","find","i","removeChild","before","nextKeyToElement","t","childElement","firstElementChild","prepend","nextElementSibling","insertAdjacentElement","UpdateScoreboardAction","type","ScoreboardComponent","HTMLElement","super","innerHTML","store","Store","router","AppRouter","tableBody","querySelector","scoreboardLoadError","scoreboardRenderer","g","userId","row","document","appendChild","connectedCallback","abortController","AbortController","postAction","subscribe","s","scoreboard","e","innerText","place","displayName","points","toFixed","style","display","scoreboardRequest","RequestState","signal","abortableEventListener","preventDefault","navigate","disconnectedCallback","abort","customElements","define"],"sourceRoot":""}